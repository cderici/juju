// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: MachineWatcherService,MachineDeadEnsurerService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/machine_service_mock.go github.com/juju/juju/apiserver/common MachineWatcherService,MachineDeadEnsurerService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	machine "github.com/juju/juju/core/machine"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockMachineWatcherService is a mock of MachineWatcherService interface.
type MockMachineWatcherService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineWatcherServiceMockRecorder
}

// MockMachineWatcherServiceMockRecorder is the mock recorder for MockMachineWatcherService.
type MockMachineWatcherServiceMockRecorder struct {
	mock *MockMachineWatcherService
}

// NewMockMachineWatcherService creates a new mock instance.
func NewMockMachineWatcherService(ctrl *gomock.Controller) *MockMachineWatcherService {
	mock := &MockMachineWatcherService{ctrl: ctrl}
	mock.recorder = &MockMachineWatcherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineWatcherService) EXPECT() *MockMachineWatcherServiceMockRecorder {
	return m.recorder
}

// WatchMachines mocks base method.
func (m *MockMachineWatcherService) WatchMachines(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchMachines", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMachines indicates an expected call of WatchMachines.
func (mr *MockMachineWatcherServiceMockRecorder) WatchMachines(arg0 any) *MockMachineWatcherServiceWatchMachinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMachines", reflect.TypeOf((*MockMachineWatcherService)(nil).WatchMachines), arg0)
	return &MockMachineWatcherServiceWatchMachinesCall{Call: call}
}

// MockMachineWatcherServiceWatchMachinesCall wrap *gomock.Call
type MockMachineWatcherServiceWatchMachinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineWatcherServiceWatchMachinesCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockMachineWatcherServiceWatchMachinesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineWatcherServiceWatchMachinesCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMachineWatcherServiceWatchMachinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineWatcherServiceWatchMachinesCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockMachineWatcherServiceWatchMachinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachineDeadEnsurerService is a mock of MachineDeadEnsurerService interface.
type MockMachineDeadEnsurerService struct {
	ctrl     *gomock.Controller
	recorder *MockMachineDeadEnsurerServiceMockRecorder
}

// MockMachineDeadEnsurerServiceMockRecorder is the mock recorder for MockMachineDeadEnsurerService.
type MockMachineDeadEnsurerServiceMockRecorder struct {
	mock *MockMachineDeadEnsurerService
}

// NewMockMachineDeadEnsurerService creates a new mock instance.
func NewMockMachineDeadEnsurerService(ctrl *gomock.Controller) *MockMachineDeadEnsurerService {
	mock := &MockMachineDeadEnsurerService{ctrl: ctrl}
	mock.recorder = &MockMachineDeadEnsurerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineDeadEnsurerService) EXPECT() *MockMachineDeadEnsurerServiceMockRecorder {
	return m.recorder
}

// EnsureDeadMachine mocks base method.
func (m *MockMachineDeadEnsurerService) EnsureDeadMachine(arg0 context.Context, arg1 machine.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeadMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeadMachine indicates an expected call of EnsureDeadMachine.
func (mr *MockMachineDeadEnsurerServiceMockRecorder) EnsureDeadMachine(arg0, arg1 any) *MockMachineDeadEnsurerServiceEnsureDeadMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeadMachine", reflect.TypeOf((*MockMachineDeadEnsurerService)(nil).EnsureDeadMachine), arg0, arg1)
	return &MockMachineDeadEnsurerServiceEnsureDeadMachineCall{Call: call}
}

// MockMachineDeadEnsurerServiceEnsureDeadMachineCall wrap *gomock.Call
type MockMachineDeadEnsurerServiceEnsureDeadMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineDeadEnsurerServiceEnsureDeadMachineCall) Return(arg0 error) *MockMachineDeadEnsurerServiceEnsureDeadMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineDeadEnsurerServiceEnsureDeadMachineCall) Do(f func(context.Context, machine.Name) error) *MockMachineDeadEnsurerServiceEnsureDeadMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineDeadEnsurerServiceEnsureDeadMachineCall) DoAndReturn(f func(context.Context, machine.Name) error) *MockMachineDeadEnsurerServiceEnsureDeadMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
